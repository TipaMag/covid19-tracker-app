{"version":3,"sources":["components/Header/Header.jsx","api/api.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","assets/images/logo.png"],"names":["useStyles","makeStyles","theme","root","flexGrow","logo","width","menuButton","marginRight","spacing","Header","classes","className","AppBar","position","color","Toolbar","src","alt","url","api","country","modifiedURL","axios","get","data","confirmed","deaths","recovered","lastUpdate","console","log","countries","map","item","name","dailyData","daily","total","date","reportDate","StyledContainer","styled","Grid","StyledCard","infected","css","death","Cards","useState","setData","useEffect","a","getData","container","justify","component","Card","xs","md","CardContent","Typography","gutterBottom","varian","start","end","value","duration","separator","Date","toDateString","variant","ChartContainer","div","Chart","setDailyData","getDailyData","lineChart","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","height","options","maintainAspectRatio","barChart","title","display","text","StyledItem","CountryPicker","onSelectCountry","setCountries","getCountriesData","FormControl","NativeSelect","onChange","e","target","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3164308b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { AppBar, Toolbar, Typography, IconButton } from '@material-ui/core'\r\nimport logo from '../../assets/images/logo.png'\r\n\r\n// import Brightness3Icon from '@material-ui/icons/Brightness3'\r\n// import WbSunnyIcon from '@material-ui/icons/WbSunny';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    logo: {\r\n        width: 200,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" color='default'>\r\n                <Toolbar>\r\n                    <img src={logo} alt=\"logo\" className={classes.logo} />\r\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Brightness3Icon />\r\n                    </IconButton> */}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\nexport default Header","import axios from 'axios'\r\n\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const api = {\r\n    async getData(country) {\r\n        let modifiedURL = url\r\n        if (country) {\r\n            modifiedURL = `${url}/countries/${country}`\r\n        }\r\n        try {\r\n            let { data: { confirmed, deaths, recovered, lastUpdate } } = await axios.get(modifiedURL)\r\n            return { confirmed, deaths, recovered, lastUpdate }\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    },\r\n    async getCountries() {\r\n        try {\r\n            let { data } = await axios.get(`${url}/countries`)\r\n            let countries = data.countries.map((item) => item.name)\r\n            return countries\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    },\r\n    async getDaily() {\r\n        try {\r\n            let { data } = await axios.get(`${url}/daily`)\r\n\r\n            let dailyData = data.map((daily) => ({\r\n                confirmed: daily.confirmed.total,\r\n                deaths: daily.deaths.total,\r\n                date: daily.reportDate\r\n            }))\r\n            return dailyData\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport { api } from '../../api/api'\r\n\r\nconst StyledContainer = styled(Grid)`\r\n    margin: 30px 0;\r\n`\r\nconst StyledCard = styled(Grid)`\r\n    margin: 0 2% 20px 2%;\r\n    background-color: #EBECF0;\r\n    box-shadow:  3px 3px 5px #BABECC,  -5px -5px 10px #FFF;\r\n    \r\n    ${({ infected }) =>\r\n        infected &&\r\n        css`\r\n        border-bottom: 10px solid yellow;\r\n    `};\r\n    ${({ recovered }) =>\r\n        recovered &&\r\n        css`\r\n        border-bottom: 10px solid green;\r\n    `};\r\n    ${({ death }) =>\r\n        death &&\r\n        css`\r\n        border-bottom: 10px solid red;\r\n    `};\r\n`\r\n\r\nconst Cards = ({country}) => {\r\n    let [data, setData] = useState([])\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            setData(await api.getData(country))\r\n        }\r\n        getData()\r\n    }, [country])\r\n\r\n    if (!data.confirmed) {\r\n        return null\r\n    }\r\n    return (\r\n        <StyledContainer>\r\n            <Grid container justify='center'>\r\n                <StyledCard infected=\"true\" item component={Card} xs={12} md={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography varian=\"h5\">\r\n                            <CountUp start={0} end={data.confirmed.value} duration={1.5} separator=\" \" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </StyledCard>\r\n                <StyledCard recovered=\"true\" item component={Card} xs={12} md={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography varian=\"h5\">\r\n                            <CountUp start={0} end={data.recovered.value} duration={1.5} separator=\" \" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>\r\n                </StyledCard>\r\n                <StyledCard death=\"true\" item component={Card} xs={12} md={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                        <Typography varian=\"h5\">\r\n                            <CountUp start={0} end={data.deaths.value} duration={1.5} separator=\" \" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </StyledCard>\r\n            </Grid>\r\n        </StyledContainer>\r\n\r\n    )\r\n}\r\nexport default Cards","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport { api } from '../../api/api'\r\n\r\nconst ChartContainer = styled.div`\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    box-shadow: inset 2px 2px 5px #BABECC, inset -5px -5px 10px #FFF;\r\n    border-radius: 10px;\r\n`\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n    let [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getDailyData = async () => {\r\n            setDailyData(await api.getDaily())\r\n        }\r\n        getDailyData()\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [\r\n                    {\r\n                        label: 'Confirmed',\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        backgroundColor: 'rgba(223, 175, 17, 0.4)',\r\n                        borderColor: 'rgba(223, 175, 17, 0.7)',\r\n                        borderWidth: 2,\r\n                        hoverBackgroundColor: 'rgba(223, 175, 17, 0.9)',\r\n                        hoverBorderColor: 'rgba(223, 175, 17, 1)',\r\n                    },\r\n                    {\r\n                        label: 'Death',\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        backgroundColor: 'rgba(223, 17, 17, 1)',\r\n                        borderColor: 'rgba(223, 17, 17, 0.7)',\r\n                        borderWidth: 2,\r\n                        hoverBackgroundColor: 'rgba(223, 17, 17, 0.9)',\r\n                        hoverBorderColor: 'rgba(223, 17, 17, 1)',\r\n                    }\r\n                ]\r\n            }}\r\n            width={100}\r\n            height={300}\r\n            options={{\r\n                maintainAspectRatio: false\r\n            }}\r\n        />\r\n    )\r\n    const barChart = (\r\n        confirmed ?\r\n            (<Bar\r\n                data={{\r\n                    labels: ['Confirmed', 'Recovered', 'Deaths'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'People',\r\n                            data: [confirmed.value, recovered.value, deaths.value],\r\n                            backgroundColor: ['yellow', 'green', 'red'],\r\n                            borderColor: 'rgba(223, 175, 17, 0.7)',\r\n                        },\r\n                    ]\r\n                }}\r\n                width={100}\r\n                height={300}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    title: { display: true, text: `Current state in ${country}` }\r\n                }}\r\n            />) : null\r\n    )\r\n\r\n    return (\r\n        <ChartContainer>\r\n            {country \r\n                ? barChart \r\n                : lineChart\r\n            }\r\n        </ChartContainer>\r\n    )\r\n}\r\nexport default Chart","import React, { useState, useEffect } from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport NativeSelect from '@material-ui/core/NativeSelect'\r\nimport { api } from '../../api/api'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledItem = styled(Grid)`\r\n    margin-bottom: 20px;\r\n    padding: 10px;\r\n    box-shadow: inset 2px 2px 5px #BABECC, inset -5px -5px 10px #FFF;\r\n`\r\n\r\nconst CountryPicker = ({ onSelectCountry }) => {\r\n    let [countries, setCountries] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getCountriesData = async () => {\r\n            setCountries(await api.getCountries())\r\n        }\r\n        getCountriesData()\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container justify='center'>\r\n            <StyledItem item component={FormControl}>\r\n                <NativeSelect onChange={(e) => onSelectCountry(e.target.value)}>\r\n                    <option value=''>Global</option>\r\n                    {countries &&\r\n                        countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n                </NativeSelect>\r\n            </StyledItem>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React, { useState } from 'react'\n// import styled from 'styled-components'\nimport { Header, Cards, Chart, CountryPicker } from './components'\nimport { api } from './api/api'\n\nconst App = () => {\n  let [data, setData] = useState({\n    data: [],\n    country: ''\n  })\n\n  const onSelectCountry = async (country) => {\n    let data = await api.getData(country)\n    setData({ \n      data: data, \n      country: country \n    })\n  }\n  return (\n    <div className=\"App\">\n      <Header />\n      <Cards country={data.country} />\n      <CountryPicker onSelectCountry={onSelectCountry} />\n      <Chart data={data.data} country={data.country} />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.d7265326.png\";"],"sourceRoot":""}